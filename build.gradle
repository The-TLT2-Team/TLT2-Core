buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.21+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'io.freefair.lombok' version '8.6'
}



version = mod_version
group = mod_group_id

base {
    archivesName = 'tltmod'
}

jarJar.enable()
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "tltmod" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "tltmod"
        }

        server {
            property 'forge.enabledGameTestNamespaces', "tltmod"
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', "tltmod"
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "tltmod", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "tltmod.refmap.json"
    config 'tltmod.mixins.json'
    debug.verbose = true
    debug.export = true
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven { // SlimeKnights and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        url = "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url = uri("https://maven.latvian.dev/releases")
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven { url = "https://maven.covers1624.net/" }
    maven { url 'https://modmaven.dev/' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    compileOnly fileTree(dir: 'lib', includes: ['*.jar'])
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-3.10.1.76")
    implementation fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:15.20.0.106")
    implementation fg.deobf("curse.maven:l2library-620203:6806000")
    implementation fg.deobf("curse.maven:l2hostility-909207:6985550")
    implementation fg.deobf("curse.maven:l2-complements-758349:6939786")
    implementation fg.deobf("com.brandon3055.brandonscore:BrandonsCore:1.20.1-3.2.1.+:universal")
    implementation fg.deobf("com.brandon3055.draconicevolution:Draconic-Evolution:1.20.1-3.1.2.+:universal")
    //compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.11")
    implementation fg.deobf("curse.maven:tinkers-advanced-1213078:6947305")
    implementation fg.deobf("curse.maven:etst-lib-1206379:6732443")
    implementation fg.deobf("mekanism:Mekanism:1.20.1-10.4.15.75")// Mekanism
    implementation fg.deobf("mekanism:Mekanism:1.20.1-10.4.15.75:generators")// Mekanism: Generators
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    implementation fg.deobf("curse.maven:sakura-tinker-1217345:7028582")
    implementation fg.deobf("curse.maven:curios-309927:6418456")
    implementation fg.deobf("curse.maven:botania-225643:6870713")
    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:5753868")
    implementation fg.deobf("curse.maven:citadel-331936:6702068")
    implementation fg.deobf("curse.maven:extrabotany-reburn-1271869:6818025")
    implementation fg.deobf("curse.maven:tinkers-ingenuity-1300480:7041355")
    implementation fg.deobf("curse.maven:alexs-caves-924854:5848216")
    implementation fg.deobf("com.teamcofh:cofh_core:1.20.1-11.0.2.56+")
    implementation fg.deobf("curse.maven:enigmatic-legacy-336184:5600004")
    implementation fg.deobf("curse.maven:caelus-308989:5281700")
    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5468648")
    implementation fg.deobf("curse.maven:extrabotany-reburn-1271869:6818025")
    implementation fg.deobf("curse.maven:event-wrapper-1256971:6788387")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:7051013")
    implementation fg.deobf("curse.maven:geckolib-388172:7025129")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:6688854")
    compileOnly fg.deobf("curse.maven:ad-astra-635042:6262032")
    implementation fg.deobf("curse.maven:kaleidoscope-cookery-1309203:7057531")
    implementation fg.deobf("curse.maven:deeperdarker-659011:5906086")
    implementation fg.deobf("curse.maven:goety-586095:7073504")

    compileOnly fg.deobf(jarJar("com.tterrag.registrate:Registrate:MC1.20-1.3.11")) {
        transitive = false
        jarJar.ranged(it, "[MC1.20-1.3.11,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2library:l2library:2.4.25-slim")) {
        transitive = false
        jarJar.ranged(it, "[2.4.25,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2serial:l2serial:1.2.4")) {
        transitive = false
        jarJar.ranged(it, "[1.2.4,)")
    }
    implementation fg.deobf(jarJar("dev.xkmc.l2damagetracker:l2damagetracker:0.4.3")) {
        transitive = false
        jarJar.ranged(it, "[0.4.3,)")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : 'tltmod',
                'Specification-Vendor'    : 'fg',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : 'fg',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "tltmod.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }
tasks.jarJar.configure {
    archiveClassifier.set('')
}

jar {
    archiveClassifier.set('slim')
}
// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

